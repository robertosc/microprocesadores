
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;##############################################################################
                        ;                          Proyecto Final: Runmeter623
                        ;   Fecha: 30 de noviembre del 2020.
                        ;   Autor: Victor Yeom Song
                        ;
                        ;   Descripcion: El siguiente codigo para la tarjeta de entrenamiento dragon12 corresponde a un sistema de medicion de velocidad
                        ;   y despliegue de informacion en un velodromo. Cuenta con 4 modos; el modo config para configurar la cantidad de vueltas que
                        ;   se desean medir, el modo libre para tener al sistema en un tipo de modo ocioso, el modo competencia que mide la velocidad y
                        ;   la cantidad de vueltas realizadas por un ciclista y el modo resumen que le muestra al ciclista su rendimiento en forma de la
                        ;   velocidad promedio en la cantidad de vueltas medida. Todo el intercambio de informacion con el ciclista ocurre por medio del
                        ;   despliegue de datos en la pantalla LCD y la pantalla de 7 segmentos, así como el teclado matricial en el caso del modo config.
                        ;
                        ;##############################################################################
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        
                        ;------------------------------------------------------------------------------
                        ;     Declaracion de las estructuras de datos y vectores de interrupcion
                        ;------------------------------------------------------------------------------
                        ;Vectores de interrupcion:
3e52                                    ORG $3E52   ;direccion del vector de interrupcion ATD0.
3e52 22 91                              DW ATD_ISR  ;direccion de la subrutina de servicio a interrupcion ATD0.
3e70                                    ORG $3E70   ;direccion del vector de interrupcion RTI.
3e70 22 bb                              DW RTI_ISR  ;direccion de la subrutina de servicio a interrupcion RTI.
3e4c                                    ORG $3E4C   ;direccion del vector de interrupcion PTH.
3e4c 21 bc                              DW CALCULAR ;direccion de la subrutina de servicio a interrupcion PTH.
3e66                                    ORG $3E66   ;direccion del vector de interrupcion OC4.
3e66 22 db                              DW OC4_ISR  ;direccion de la subrutina de servicio a interrupcion OC4.
3e5e                                    ORG $3E5E   ;direccion del vector de interrupcion TCNT.
3e5e 22 47                              DW TCNT_ISR ;direccion de la subrutina de servicio a interrupcion TCNT.
                        
                        
                        ;Estructuras de datos:
1000                                    ORG $1000
1000                    Banderas:       DS 1  ;Tiene el formato: MOD_PREV_H:MOD_PREV_L:CALC_TICKS:LIBRE_PREVIO:PANT_FLG:ARRAY_OK:TCL_LEIDA:TCL_LISTA.
                                              ;MOD_PREV_H y MOD_PREV_L indican el modo de funcionamiento previo al que se utiliza, usado para funcionamiento de los modos competencia y libre
                                              ;PANT_FLG indica el estado de las pantallas a utilizar por PANT_CTRL
                                              ;ARRAY_OK indica que se presiono la tecla Enter y que en el arreglo ya se tienen todos los valores leidos.
                                              ;TCL_LEIDA indica que ya se habia tenido una lectura del teclado y que se estaba esperando a que se diera la supresion de rebotes.
                                              ;TCL_LISTA indica que luego de la supresion de rebotes se confirmo que si se presiono una tecla.
                        
1001                    NumVueltas:     DS 1  ;cantidad maxima de vueltas a leer
1002                    ValorVueltas:   DS 1  ;variable de transicion para la lectura de NumVueltas con rebote de botones
1003 02                 MAX_TCL:        DB 2  ;cantidad maximas de teclas que se leen
1004                    Tecla:          DS 1  ;en esta variable se almacena el valor leido del teclado en la subrutina MUX_TECLADO.
1005                    Tecla_IN:       DS 1  ;en esta variable se almacena temporalmente el valor de Tecla antes de la supresion de rebotes. Si despues de la supresion se da que Tecla y Tecla_IN son iguales es porque efectivamente se presiono una tecla que debe ser guardada.
1006                    Cont_Reb:       DS 1  ;es gel contador de ticks del RTI, usado para suprimir rebotes.
1007                    Cont_TCL:       DS 1  ;es el indice utilizado para escribir en el arreglo que guarda las teclas presionadas.
1008                    Patron:         DS 1  ;es el indice que lleva las iteraciones en subrutina MUX_TECLADO.
1009                    Num_Array:      DS 2  ;en este arreglo se almacenan todas las teclas presionadas por el usuario.
100b                    BRILLO:         DS 1  ;Variable controlada por PTH3/PTH2 para incrementar/decrementar el brillo de la pantalla LCD.
100c                    POT:            DS 1  ;Variable que lee el potenciometro
100d                    TICK_EN:        DS 2  ;define el tiempo que estara encendida la pantalla
100f                    TICK_DIS:       DS 2  ;define el tiempo que estara apagada la pantalla
1011                    VELOC:          DS 1  ;la velocidad medida
1012                    VUELTAS:        DS 1  ;cantidad de vueltas realizadas
1013                    VELPROM:        DS 1  ;velocidad promedio del ciclista
1014                    TICK_MED:       DS 2  ;ticks utilizados para sensar la velocidad del ciclista
1016                    BIN1:           DS 1  ;variable de entrada a subrutina CONV_BIN_BCD. Utilizada para ValorVueltas
1017                    BIN2:           DS 1  ;variable de entrada a subrutina CONV_BIN_BCD.
1018                    BCD1:           DS 1  ;variable de salida de subrutina BIN_BCD. Tambien es entrada para BCD_7SEG. Utilizada para ValorVueltas.
1019                    BCD2:           DS 1  ;variable de salida de subrutina BIN_BCD. Tambien es entrada para BCD_7SEG.
101a                    BCD_L:          DS 1  ;variable donde se guarda la salida de BIN_BCD. Utilizada para CONV_BIN_BCD.
101b                    BCD_H:          DS 1  ;variable de conversion
101c                    TEMP:           DS 1  ;variable temporal para conversiones
101d                    LOW:            DS 1  ;variable requerida para el algoritmo de la subrutina BIN_BCD.
101e                    DISP1:          DS 1  ;corresponde al valor que se escribe en el display de 7 segmentos.
101f                    DISP2:          DS 1  ;BCD2 utiliza DISP1 y DISP2 para desplegarse
1020                    DISP3:          DS 1  ;corresponde al valor que se escribe en el display de 7 segmentos.
1021                    DISP4:          DS 1  ;BCD1 utiliza DISP3 y DISP4 para desplegarse
                        
1022                    LEDS            DS 1  ;guarda el estado de los LEDS
1023                    CONT_DIG:       DS 1  ;cuenta cual digito de 7 segmentos se debe habilitar. Cambia cada vez que CONT_TICKS alcanza 100.
1024                    CONT_TICKS:     DS 1  ;contador de ticks de Output Compare para multiplexar.
1025                    DT:             DS 1  ;ciclo de trabajo. DT = N-K.
1026                    CONT_7SEG:      DS 2  ;contador de ticks de OC4 para lograr refrescamiento de LEDS y Displays a 10Hz.
1028                    CONT_200:       DS 1  ;para conteo de 200 ms en RTI para el ATD
1029                    Cont_Delay:     DS 1  ;esta variable se carga con alguna de las siguientes tres constantes para generar retrasos temporales.
102a 64                 D2ms:           DB 100  ;100 ticks a 50kHz son 2 milisegundos
102b 0d                 D260us:         DB 13  ;13 ticks a 50kHz son 260 microsegundos
102c 03                 D40us:          DB 3  ;2 ticks a 50kHz son 40 microsegundos
102d 01                 CLEAR_LCD:      DB $01  ;comando para limpiar el LCD
102e 80                 ADD_L1:         DB $80  ;direccion inicio de linea 1
102f c0                 ADD_L2:         DB $C0  ;direccion inicio de linea 2
1030                    BanderasEx:     DS 1    ;Banderas de uso adicionales. Tiene el formato: X:X:X:X:X:DISPLAY_CALC:CANT_VUELTAS_MAXIMA:VELOCIDAD_VAL
                                                ;VELOCIDAD_VAL indica si la velocidad medida en PH0 esta en el rango valido
                                                ;CANT_VUELTAS_MAXIMA indica cuando Vueltas se vuelve igual a NumVueltas
                                                ;DISPLAY_CALC es utilizado para mostrar el Mensaje Calculando en el momento apropiado
1031                    TICKS_TIME:     DS 2  ;Variable WORD utilizada para medir la cantidad de ticks que deben pasar para recorrer 100 m
                        
1040                                    ORG $1040
1040 01 02 03 04 05 06  Teclas:         DB $01,$02,$03,$04,$05,$06,$07,$08,$09,$0B,$00,$0E ;valores de las teclas
     07 08 09 0b 00 0e
                        
1050                                    ORG $1050
1050 3f 06 5b 4f 66 6d  SEGMENT:        DB $3F,$06,$5B,$4F,$66,$6D,$7D,$07,$7F,$6F,$40,$00 ;patrones para el display de 7 segmentos de los digitos
     7d 07 7f 6f 40 00
                        
1060                                    ORG $1060
1060 04 28 28 06 0c     iniDsp:         DB 4,FUNCTION_SET,FUNCTION_SET,ENTRY_MODE_SET,DISPLAY_ON
                        
                        ;LCD:
0028                    FUNCTION_SET:   EQU $28
0006                    ENTRY_MODE_SET: EQU $06
000c                    DISPLAY_ON:     EQU $0C
0001                    CLEAR_DISPLAY:  EQU $01
0002                    RETURN_HOME:    EQU $02
0080                    DDRAM_ADDR1:    EQU $80
00c0                    DDRAM_ADDR2:    EQU $C0
0000                    EOM:            EQU $00
                        
1070                                    ORG $1070 ;mensajes
1070 20 20 52 75 6e 4d  RunMeter:       FCC "  RunMeter 623  "
     65 74 65 72 20 36
     32 33 20 20
1080 00                                 DB EOM
1081 20 20 45 53 50 45  Esperando:      FCC "  ESPERANDO...  "
     52 41 4e 44 4f 2e
     2e 2e 20 20
1091 00                                 DB EOM
1092 43 41 4c 43 55 4c  Calculando:     FCC "CALCULANDO...   "
     41 4e 44 4f 2e 2e
     2e 20 20 20
10a2 00                                 DB EOM
10a3 20 20 20 4d 4f 44  LIBRE_MSG:      FCC "   MODO LIBRE   "
     4f 20 4c 49 42 52
     45 20 20 20
10b3 00                                 DB EOM
10b4 20 20 4d 4f 44 4f  CONFIG_MSG1:    FCC "  MODO CONFIG   "
     20 43 4f 4e 46 49
     47 20 20 20
10c4 00                                 DB EOM
10c5 20 20 4e 55 4d 20  CONFIG_MSG2:    FCC "  NUM VUELTAS   "
     56 55 45 4c 54 41
     53 20 20 20
10d5 00                                 DB EOM
10d6 20 4d 2e 20 43 4f  COMP_MSG1:      FCC " M. COMPETENCIA "
     4d 50 45 54 45 4e
     43 49 41 20
10e6 00                                 DB EOM
10e7 56 55 45 4c 54 41  COMP_MSG2:      FCC "VUELTA     VELOC"
     20 20 20 20 20 56
     45 4c 4f 43
10f7 00                                 DB EOM
10f8 20 20 4d 4f 44 4f  RESUM_MSG1:     FCC "  MODO RESUMEN  "
     20 52 45 53 55 4d
     45 4e 20 20
1108 00                                 DB EOM
1109 56 55 45 4c 54 41  RESUM_MSG2:     FCC "VUELTAS    VELOC"
     53 20 20 20 20 56
     45 4c 4f 43
1119 00                                 DB EOM
111a 2a 2a 20 56 45 4c  ALERT_MSG1:     FCC "** VELOCIDAD ** "
     4f 43 49 44 41 44
     20 2a 2a 20
112a 00                                 DB EOM
112b 2a 46 55 45 52 41  ALERT_MSG2:     FCC "*FUERA DE RANGO*"
     20 44 45 20 52 41
     4e 47 4f 2a
113b 00                                 DB EOM
                        ;------------------------------------------------------------------------------
                        
                        
                        
                        ;*******************************************************************************
                        ;                             Programa principal
                        ;*******************************************************************************
                        ;------------------------------------------------------------------------------
                        ;                          Configuracion del hardware
                        ;------------------------------------------------------------------------------
2000                        ORG $2000
                        ;Configuracion RTI:
2000 4c 38 80               BSET CRGINT %10000000 ;se habilita RTI
2003 18 0b 31 00 3b         MOVB #$31,RTICTL      ;periodo de 1.024 ms
                        
                        ;Configuracion keywakeup en puerto H:
2008 1d 02 66 09            BCLR PIEH,%00001001   ;se deshabilita keywakeup en PH0 y PH3.
200c 18 0b 00 02 65         MOVB #$00,PPSH ;las interrupciones deben ocurrir en el flanco decreciente.
                        
                        ;Configuracion PH7-PH6 como entrada de proposito general por polling: (Dipswitch)
2011 1d 02 62 c0            BCLR DDRH %11000000
                        
                        ;Configuracion del teclado en puerto A:
2015 18 0b f0 00 02         MOVB #$F0,DDRA        ;parte alta de A como salida y parte baja como entrada
201a 4c 0c 01               BSET PUCR %00000001   ;resistencias de pull-up en puerto A. Son necesarias para que haya un 1 en el PAD cuando no se presiona ningun boton del teclado.
                        
                        ;Configuracion del modulo de Timer como Output Compare en el Canal 4:
201d 4c 46 80               BSET TSCR1 %10000000 ;se habilita modulo de timer.
2020 4c 4d 03               BSET TSCR2 %00000011 ;prescaler es 2^3 = 8
2023 4c 40 10               BSET TIOS %00010000 ;se configura el canal 4 como Output Compare.
2026 4c 4c 10               BSET TIE %00010000 ;se habilita interrupcion del canal 4.
2029 4d 48 03               BCLR TCTL1 3 ;no es necesario que haya una salida en puerto T. Solo se requiere la interrupcion.
                        
                        ;Configuracion de los displays de 7 segmentos y los LEDS.
202c 18 0b ff 00 03         MOVB #$FF,DDRB ;puerto core B se configura como salida de proposito general. (LEDS y SEGMENTOS)
2031 18 0b 0f 02 5a         MOVB #$0F,DDRP ;parte baja de puerto P se configura como salida de proposito general. (~Habilitador Segmentos)
2036 1c 02 6a 02            BSET DDRJ %00000010 ;se configura bit 1 del puerto J como salida de proposito general . (~Habilitador LEDS)
                        
                        ;Configuracion de pantalla LCD
203a 18 0b ff 00 33         MOVB #$FF,DDRK ;todos los pines del puerto K se configura como salida para controlar la LCD.
                        
                        ;Configuracion del ATD
203f 18 0b 30 00 83         MOVB #$30,ATD0CTL3
2044 18 0b b9 00 84         MOVB #$B9,ATD0CTL4
2049 18 0b 87 00 85         MOVB #$87,ATD0CTL5
                        
204e 10 ef                  CLI        ;habilita interrupciones mascarables.
2050 cf 3b ff               LDS #$3BFF  ;inicializa el stack
                        ;------------------------------------------------------------------------------
                        ;                       Inicializacion de variables
                        ;------------------------------------------------------------------------------
                        ;Teclado matricial:
2053 18 0b ff 10 04         MOVB #$FF,Tecla
2058 18 0b ff 10 05         MOVB #$FF,Tecla_IN
205d 18 0b ff 10 09         MOVB #$FF,Num_Array
2062 79 10 06               CLR Cont_Reb
2065 79 10 07               CLR Cont_TCL
2068 79 10 08               CLR Patron
206b b6 10 03               LDAA MAX_TCL
206e ce 10 08               LDX #NUM_ARRAY-1
2071                    LoopCLR:
2071 18 08 e4 ff            MOVB #$FF,A,X
2075 04 30 f9               DBNE A,LoopCLR
                        
                        ;Displays de 7 segmentos y LEDS:
2078 79 10 26               CLR CONT_7SEG
207b 79 10 24               CLR CONT_TICKS
207e 79 10 23               CLR CONT_DIG
2081 18 0b 32 10 0b         MOVB #50,BRILLO
2086 18 0b 02 10 22         MOVB #$02,LEDS
208b 79 10 18               CLR BCD1
208e 79 10 19               CLR BCD2
2091 18 0c 10 50 10 20      MOVB SEGMENT,DISP3 ;para tener DISP3 produciendo un 0
2097 18 0c 10 50 10 21      MOVB SEGMENT,DISP4 ;para tener DISP4 produciendo un 0. Importa mas que nada si se desea que en DISP3 y DISP4 presenten el ultimo valor valido introducido de ValorVueltas, con OC4
                        
                        ;Programa:
209d 79 10 12               CLR VUELTAS
20a0 79 10 02               CLR ValorVueltas
20a3 79 10 01               CLR NumVueltas
20a6 79 10 11               CLR VELOC
20a9 79 10 13               CLR VELPROM
20ac 79 10 00               CLR Banderas
20af 79 10 30               CLR BanderasEx
20b2 79 10 06               CLR Cont_Reb
20b5 79 10 07               CLR Cont_TCL
20b8 18 03 00 00 10 31      MOVW #$0000,TICKS_TIME
20be 18 03 00 00 10 0d      MOVW #$0000,TICK_EN
20c4 18 03 00 00 10 0f      MOVW #$0000,TICK_DIS
                        
                        ;Inicializacion del LCD
20ca ce 10 61               LDX #iniDsp+1 ;Se carga en X la tabla que contiene los comandos de inicializacion. Posicion 0 tiene el tamano de la tabla.
20cd c7                     CLRB
20ce                    COMMANDS:
20ce a6 e5                  LDAA B,X ;Se recorren los comandos con direccionamiento indexado por acumulador B
20d0 16 23 9e               JSR Send_Command ;Se ejecuta cada comando
20d3 18 0c 10 2c 10 29      MOVB D40us,Cont_Delay ;40us son necesarios luego de enviar cualquiera de los comando de inicializacion
20d9 16 23 fe               JSR Delay
20dc 52                     INCB ;siguiente comando
20dd f1 10 60               CMPB iniDsp
20e0 26 ec                  BNE COMMANDS ;Si ya se ejecutaron todos los comandos de la tabla, terminar comandos de inicializacion
20e2 b6 10 2d               LDAA CLEAR_LCD ;Cargar comando de limpiar pantalla
20e5 16 23 9e               JSR Send_Command ;enviar comando de limpiar pantalla
20e8 18 0c 10 2a 10 29      MOVB D2ms,Cont_Delay ;luego de enviar comando limpiar pantalla se debe esperar 2ms
20ee 16 23 fe               JSR Delay
                        
                        ;------------------------------------------------------------------------------
20f1                    MAIN:
20f1 4c 4c 10               BSET TIE,$10 ;se habilitan las interrupciones por output compare en canal 4
20f4 4c 46 80               BSET TSCR1,$80 ;se habilita el modulo de timer
20f7 dc 44                  LDD TCNT
20f9 c3 00 3c               ADDD #60
20fc 5c 58                  STD TC4 ;se carga el valor inicial para interrupcion de OC4
20fe 4c 38 80               BSET CRGINT,$80 ;se habilitan las interrupciones RTI
                            ;se habilitan las interrupciones por ATD0
2101 18 0b c2 00 82         MOVB #$C2,ATD0CTL2
2106 86 a0                  LDAA #160
2108                    CONFIG_ATD:
2108 04 30 fd               DBNE A,CONFIG_ATD ;3 ciclos del reloj * 160 * (1/48MHz) = 10 us. Tiempo de inicio del ATD
                        
                        ;Entra a la primera configuracion
210b                    FIRST_CONFIG:
210b 18 0b bb 10 17         MOVB #$BB,BIN2
2110 16 25 9d               JSR MODO_CONFIG ;Mientras NumVueltas no sea distinto de 0, se seguira leyendo por un valor valido
2113 f7 10 01               TST NumVueltas
2116 27 f3                  BEQ FIRST_CONFIG
2118                    LECTURA_MODO:
2118 b6 02 61               LDAA PTIH ;Se leen PH7:PH6 por polling, para determinar el modo de funcionamiento
211b 84 c0                  ANDA #$C0 ;Se dejan solamente los 2 bits mas significativos, correspondientes a PH7 y PH6
211d 81 00                  CMPA #$00
211f 27 1b                  BEQ GO_LIBRE
2121 1f 10 00 10 0a         BRCLR Banderas $10 CONTINUE_CHECK
2126 1d 10 00 10            BCLR Banderas,$10
212a 4c 4c 10               BSET TIE,$10 ;se habilitan las interrupciones por output compare en canal 4
212d 4c 38 80               BSET CRGINT,$80 ;se habilitan las interrupciones RTI
2130                    CONTINUE_CHECK:
2130 81 c0                  CMPA #$C0
2132 27 21                  BEQ GO_COMP
2134 81 80                  CMPA #$80
2136 27 54                  BEQ GO_RESUM
2138 81 40                  CMPA #$40
213a 27 62                  BEQ GO_CONF
                        
213c                    GO_LIBRE:
                            ;si no es ni modo competencia ni modo resumen, se limpian VELOC, VUELTAS, VELPROM y se deshabilitan interrupciones por TCNT y PTH
213c 79 10 11               CLR VELOC
213f 79 10 12               CLR VUELTAS
2142 79 10 13               CLR VELPROM
2145 4d 4d 80               BCLR TSCR2,$80
2148 1d 02 66 09            BCLR PIEH %00001001
214c 1d 10 00 c0            BCLR Banderas,$C0
2150 16 26 ea               JSR MODO_LIBRE
2153 20 c3                  BRA LECTURA_MODO
                        
2155                    GO_COMP:
2155 b6 10 00               LDAA Banderas ;se verifica el modo previo
2158 84 c0                  ANDA #$C0
215a 81 c0                  CMPA #$C0
215c 27 24                  BEQ NOT_FIRST_COMP
215e ce 10 70               LDX #RunMeter   ;se carga el mensaje inicial
2161 cd 10 81               LDY #Esperando
2164 16 27 12               JSR Cargar_LCD
2167 18 0b bb 10 16         MOVB #$BB,BIN1
216c 18 0b bb 10 17         MOVB #$BB,BIN2
2171 4c 4d 80               BSET TSCR2,$80        ;se habilita TCNT
2174 1c 02 66 09            BSET PIEH,%00001001   ;se habilita keywakeup en PH0 y PH3.
2178 1d 10 00 04            BCLR Banderas,$04 ;en este caso solo es necesario borrar ARRAY_OK
217c 79 10 09               CLR Num_Array
217f 79 10 02               CLR ValorVueltas
2182                    NOT_FIRST_COMP:
2182 1c 10 00 c0            BSET Banderas,$C0 ;se actualiza el modo previo
2186 16 26 ca               JSR MODO_COMP     ;se ejecuta el modo competicion
2189 06 21 18               JMP LECTURA_MODO  ;se vuelve a leer el modo de operacion
                        
218c                    GO_RESUM:
218c 1c 10 00 80            BSET Banderas,$80    ;se actualiza el modo previo
2190 1d 10 00 40            BCLR Banderas,$40
2194 1d 02 66 09            BCLR PIEH %00001001  ;se deshabilita keywakeup en PH0 y PH3
2198 16 25 f9               JSR MODO_RESUM       ;se ejecuta el modo resumen
219b 06 21 18               JMP LECTURA_MODO     ;se vuelve a leer el modo de operacion
                        
219e                    GO_CONF:
219e 1c 10 00 40            BSET Banderas,$40    ;se actualiza el modo previo
21a2 1d 10 00 80            BCLR Banderas,$80
                            ;si no es ni modo competencia ni modo resumen, se limpian VELOC, VUELTAS, VELPROM y se deshabilitan interrupciones por TCNT y PTH
21a6 79 10 11               CLR VELOC
21a9 79 10 12               CLR VUELTAS
21ac 79 10 13               CLR VELPROM
21af 4d 4d 80               BCLR TSCR2,$80
21b2 1d 02 66 09            BCLR PIEH %00001001
21b6 16 25 9d               JSR MODO_CONFIG      ;se ejecuta el modo config
21b9 06 21 18               JMP LECTURA_MODO     ;se vuelve a leer el modo de operacion
                        
                        
                        
                        
                        ;------------------------------------------------------------------------------
                        ;       Subrutinas de interrupciones
                        ;------------------------------------------------------------------------------
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion PTH CALCULAR: Subrutina utilizada para la lectura de los sensores y subsecuentes
                        ;      calculos de velocidad, velocidad promedio, cantidad de vueltas y ticks necesarios para recorrer 100 m.
                        ;------------------------------------------------------------------------------
                        
                        
21bc                    CALCULAR:
21bc 1e 02 67 01 05                     BRSET PIFH,$01,PH0_ISR          ; se revisa cual interrupcion es
21c1 1e 02 67 08 68                     BRSET PIFH,$08,PH3_ISR
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion PTH0: Subrutina de atencion a la interrupcion por key wakeup en PH0. Simula el segundo sensor
                        ;      del velodromo y determina si la velocidad medida esta en el rango de velocidades valido, ademas de actualizar la velocidad promedio
                        ;      en el caso de que lo este.
                        ;      INPUTS: Cont_Reb, TICK_MED
                        ;      OUTPUTS: VELOC, VELPROM, VUELTAS, VELOCIDAD_VAL, CANT_VUELTAS_MAXIMA
                        ;      Formula para calcular la velocidad: VELOC = 9064/TICK_MED
                        ;      Formula para calcular/actualizar la velocidad promedio: VELPROM = (VELPROM*(VUELTAS-1) + VELOC)/VUELTAS
                        ;------------------------------------------------------------------------------
                        
21c6                    PH0_ISR:
21c6 1c 02 67 01                        BSET PIFH,$01 ;se limpia la bandera
21ca f7 10 06                           TST Cont_Reb ;se revisa si se terminaron los rebotes
21cd 26 5e                              BNE FIN_PH0
21cf 18 0b 64 10 06                     MOVB #100,Cont_Reb ;se recarga cont_reb para control de rebotes
21d4 fe 10 14                           LDX TICK_MED ;se lee la cantidad de ticks medidos
21d7 8e 01 03                           CPX #259 ;259 ticks para 35 km/h
21da 22 42                              BHI VEL_INVAL ;si es mayor a esto, la velocidad es menor a 35 km/h
21dc 8e 00 5f                           CPX #95 ;95 ticks para 95 km/h
21df 25 3d                              BLO VEL_INVAL ;si es menor a esto, la velocidad es mayor a 95 km/h
21e1 1c 10 30 01                        BSET BanderasEx,$01 ;se levanta la bandera de velocidad valida
21e5 7e 10 31                           STX TICKS_TIME ;se guarda la cantidad de ticks necesarios para recorrer 55 m
21e8 cc 23 68                           LDD #9064 ;D = 9064
21eb 18 10                              IDIV ;X = (D/X) = 9064/TICKS = VELOC
21ed b7 54                              TFR X,D ;D = VELOC
21ef 7b 10 11                           STAB VELOC ;la velocidad siempre es menor a 1 byte, por lo que se guarda en VELOC
21f2 b6 10 13                           LDAA VELPROM ;se carga la velocidad promedio en A
21f5 f6 10 12                           LDAB VUELTAS ;se carga la cantidad de vueltas-1 en B
21f8 12                                 MUL ;D = VELPROM*(VUELTAS-1)
21f9 b7 45                              TFR D,X ;X = VELPROM*(VUELTAS-1)
21fb f6 10 11                           LDAB VELOC ;B = VELOC
21fe 1a e5                              ABX ;X = VELPROM*(VUELTAS-1) + VELOC
2200 72 10 12                           INC VUELTAS ;se actualiza el valor de VUELTAS
2203 f6 10 12                           LDAB VUELTAS
2206 87                                 CLRA ;D = VUELTAS
2207 b7 c5                              XGDX ;D = VELPROM*(VUELTAS-1) + VELOC, X = VUELTAS
2209 18 10                              IDIV ;X = (D/X) = VELPROM
220b b7 54                              TFR X,D ;D = VELPROM
220d 7b 10 13                           STAB VELPROM ;se actualiza la velocidad promedio
2210 f6 10 12                           LDAB VUELTAS
2213 f1 10 01                           CMPB NumVueltas ;se ve si se llego a NumVueltas
2216 25 11                              BLO MAX_VUELTAS_ALCANZADAS ;si no ha llegado a NumVueltas, retorna
2218 1c 10 30 02                        BSET BanderasEx,$02 ;si se llego a NumVueltas se levanta CANT_VUELTAS_MAXIMA
221c 20 0f                              BRA FIN_PH0
                        
221e                    VEL_INVAL:
221e 18 0b ff 10 11                     MOVB #$FF,VELOC ;la velocidad medida es invalida, por lo que se desactiva la bandera de velocidad valida
2223 1d 10 30 01                        BCLR BanderasEx,$01
2227 20 04                              BRA FIN_PH0
                        
2229                    MAX_VUELTAS_ALCANZADAS:
2229 1d 10 30 02                        BCLR BanderasEx,$02
                        
222d                    FIN_PH0:
222d 0b                                 RTI
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion PTH3: Subrutina de atencion a la interrupcion por key wakeup en PH3. Simula el primer sensor
                        ;      del velodromo y se encarga de borrar TICK_MED, asi como indicar que se debe cargar el Mensaje Cargando en la pantalla LCD
                        ;      INPUTS: Cont_Reb
                        ;      OUTPUTS: TICK_MED, DISPLAY_CALC
                        ;------------------------------------------------------------------------------
222e                    PH3_ISR:
222e 1c 02 67 08                        BSET PIFH,$08
2232 f7 10 06                           TST Cont_Reb
2235 26 0f                              BNE FIN_PH3
2237 1c 10 30 04                        BSET BanderasEx,$04 ;se levanta DISPLAY_CALC
223b 18 0b 64 10 06                     MOVB #100,Cont_Reb
2240 18 03 00 00 10 14                  MOVW #$0000,TICK_MED ;se borra TICK_MED
                        
2246                    FIN_PH3:
2246 0b                                 RTI
                        
                        
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion TCNT: Subrutina de atencion por timer overflow. Se encarga de incrementar TICK_MED y
                        ;      decrementar TICK_DIS y TICK_EN, esto con el objetivo de calcular la velocidad y marcar los tiempos en los que se deben actualizar
                        ;      las pantallas. Usa prescaler de 8, el tiempo de tick es dado por Ttick = 8*2^(16) / 24MHz, que es aproximadamente 21.8 ms
                        ;      OUTPUTS: TICK_MED, TICK_EN, TICK_DIS, PANT_FLG
                        ;------------------------------------------------------------------------------
                        
2247                    TCNT_ISR:
2247 4c 4f 80                           BSET TFLG2,$80 ;se limpia la bandera de interrupcion
224a fe 10 14                           LDX TICK_MED ;se carga TICK_MED y se compara si llego a $FFFF, para evitar overflow
224d 8e ff ff                           CPX #$FFFF
2250 27 04                              BEQ CHECK_EN_TCNT
2252 08                                 INX ;si no es $FFFF, se incrementa y se guarda el valor
2253 7e 10 14                           STX TICK_MED
                        
2256                    CHECK_EN_TCNT:
2256 fe 10 0d                           LDX TICK_EN ;se carga TICK_EN y se ve si es 0. Si fuera 0, se debe levantar PANT_FLG
2259 8e 00 00                           CPX #0
225c 27 0b                              BEQ EN_IS_0_TCNT
225e 8e ff ff                           CPX #$FFFF ;se ve si es $FFFF, lo cual significa que ya se llego a 0 y no se ha cargado un nuevo valor
2261 27 10                              BEQ CHECK_DIS_TCNT
2263 09                                 DEX ;si no se cumple ninguna las dos condiciones revisadas, se decrementa y guarda el valor
2264 7e 10 0d                           STX TICK_EN
2267 20 0a                              BRA CHECK_DIS_TCNT
                        
2269                    EN_IS_0_TCNT:
2269 18 03 ff ff 10 0d                  MOVW #$FFFF,TICK_EN
226f 1c 10 00 08                        BSET Banderas,$08 ;se levanta PANT_FLG
                        
2273                    CHECK_DIS_TCNT:
2273 fe 10 0f                           LDX TICK_DIS ;se carga TICK_DIS y se ve si es 0. Si fuera 0, se debe desactivar PANT_FLG
2276 8e 00 00                           CPX #0
2279 27 0b                              BEQ DIS_IS_0_TCNT
227b 8e ff ff                           CPX #$FFFF ;se ve si es $FFFF, lo cual significa que ya se llego a 0 y no se ha cargado un nuevo valor
227e 27 10                              BEQ FIN_TCNT
2280 09                                 DEX ;si no se cumple ninguna las dos condiciones revisadas, se decrementa y guarda el valor
2281 7e 10 0f                           STX TICK_DIS
2284 20 0a                              BRA FIN_TCNT
                        
2286                    DIS_IS_0_TCNT:
2286 18 03 ff ff 10 0f                  MOVW #$FFFF,TICK_DIS
228c 1d 10 00 08                        BCLR Banderas,$08 ;se desactiva PANT_FLG
                        
2290                    FIN_TCNT:
2290 0b                                 RTI
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion ATD0: Subrutina utilizada para la conversion analogica digital del potenciometro
                        ;      de la tarjeta dragon 12, utilizado para controlar el brillo de los leds y las pantallas de 7 segmentos.
                        ;      Se toman 6 mediciones y se calcula el promedio.
                        ;      INPUTS: ADR00H,ADR01H,ADR02H,ADR03H,ADR04H,ADR05H
                        ;      OUTPUTS: BRILLO, DT
                        ;------------------------------------------------------------------------------
                        
2291                    ATD_ISR:
2291 ce 00 06                           LDX #6
2294 dc 90                              LDD ADR00H   ;Se calcula el promedio de las 6 medidas del potenciometro
2296 d3 92                              ADDD ADR01H
2298 d3 94                              ADDD ADR02H
229a d3 96                              ADDD ADR03H
229c d3 98                              ADDD ADR04H
229e d3 9a                              ADDD ADR05H
22a0 18 10                              IDIV
22a2 b7 54                              TFR X,D
22a4 7b 10 0c                           STAB POT ;Guardar el promedio
22a7 86 14                              LDAA #20
22a9 12                                 MUL
22aa ce 00 ff                           LDX #255
22ad 18 10                              IDIV
22af b7 54                              TFR X,D
22b1 7b 10 0b                           STAB BRILLO
22b4 86 05                              LDAA #5 ;Se multiplica por 5 para volverlo en escala a 100
22b6 12                                 MUL
22b7 7b 10 25                           STAB DT
22ba 0b                                 RTI
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion RTI: Esta subrutina descuenta contadores
                        ;     siempre y cuando no sean cero. Los ticks del RTI duran 1.024 ms, por lo
                        ;     que si se cargan variables con X valor se pueden contar aproximadamente
                        ;     X milisegundos. Cont_Reb tiene un valor maximo de 10; se utiliza para
                        ;     suprimir rebotes contando ~10ms. Tambien lleva el tiempo para iniciar ciclos de conversion del ATD
                        ;     INPUTS: Cont_Reb, CONT_200
                        ;     OUTPUTS: Cont_Reb, CONT_200
                        ;------------------------------------------------------------------------------
22bb 4c 37 80           RTI_ISR:        bset CRGFLG %10000000                 ;borra bandera de interrupcion RTI
22be f7 10 06                           tst Cont_Reb
22c1 27 03                              beq TIMER                       ;si llegaron los rebotes a 0, se termina la rubrutina
22c3 73 10 06                           dec Cont_Reb
                        
                                                         ;Solo se decrementa si TIMER CUENTA no es cero
                        
22c6 f7 10 28           TIMER:          tst CONT_200
22c9 26 0c                              bne NO_RESET
                                        ;Caso en que es cero y se reinicia
22cb 18 0b c8 10 28                     Movb #200,CONT_200 ;Volvemos al contador con 200
22d0 18 0b 87 00 85                     Movb #$87,ATD0CTL5
22d5 20 03                              Bra FIN_RTI
                        
                        
22d7 73 10 28           NO_RESET:           dec CONT_200                          ;Decrementamos el contador de rebotes si aun no ha llegado a cero
                        
                        
22da 0b                 FIN_RTI:        Rti
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina de servicio a interrupcion por output compare en el canal 4:
                        ;     Descuenta Cont_Delay, refresca cada 100 ms (5000ticks) los valores de
                        ;     DISP1-DISP4, multiplexa el bus del puerto B para mostrar informacion en
                        ;     los displays de 7 segmentos y los LEDS, y todo con un ciclo de trabajo
                        ;     variable que depende de DT.
                        ;     INPUTS: DT, Cont_Delay, LEDS, CONT_TICKS, DISP1-DISP4
                        ;     OUTPUTS: Cont_Delay, DISP1-DISP4
                        ;------------------------------------------------------------------------------
22db                    OC4_ISR:
22db b6 10 29                           ldaa Cont_Delay                 ;Revisamos Cont_Delay para ver si hay que restarle
22de 81 00                              cmpa #0
22e0 27 03                              beq CONTROL_PANTALLA            ; si ya es 0, pasamos a siguiente func
22e2 73 10 29                           dec Cont_Delay                  ; decrementa
                        
22e5                    CONTROL_PANTALLA:
22e5 fe 10 26                           ldx CONT_7SEG                   ; carga contador de 7seg
22e8 09                                 dex                             ; le decrementa
22e9 7e 10 26                           stx CONT_7SEG
22ec 8e 00 00                           cpx #0
22ef 26 0c                              bne CONTADOR_DISP               ; Si llega a 0, se le suman 5000 y volvemos a hacer conversiones
22f1 18 03 13 88 10 26                  movw #5000,CONT_7SEG
22f7 16 24 5a                           jsr CONV_BIN_BCD
22fa 16 27 59                           jsr BCD_7SEG
                        
22fd                    CONTADOR_DISP:
22fd b6 10 24                           ldaa CONT_TICKS                 ; revisamos contador de ticks
2300 81 64                              cmpa #100
2302 26 11                              bne MUX
2304 87                                 clra                            ; si llega a 100, se borra
2305 7a 10 24                           staa CONT_TICKS
2308 72 10 23                           inc CONT_DIG                    ;cambia de digito para pasar a multiplexar
230b f6 10 23                           ldab CONT_DIG
230e c1 05                              cmpb #5                         ; Si llega a 5 se borra
2310 26 03                              bne MUX
2312 79 10 23                           clr CONT_DIG
                        
2315                    MUX:
2315 f7 10 24                           tst CONT_TICKS                  ; si el contador no es 0 pasa a ver el ciclo de trabajo
2318 26 5c                              bne DT_BRILLO
                        
231a 18 0b 02 02 68                     movb #$02,PTJ                   ; cuando es 0 ponemos dato en un display
231f 18 0b ff 02 58                     movb #$FF,PTP
                        
2324 f6 10 23                           ldab CONT_DIG                   ; cual display?
2327 c1 00                              cmpb #0
2329 27 19                              beq P4
232b c1 01                              cmpb #1
232d 27 22                              beq P3
232f c1 02                              cmpb #2
2331 27 2b                              beq P2
2333 c1 03                              cmpb #3
2335 27 34                              beq P1
                        
2337 18 0b 00 02 68                     movb #$00,PTJ
233c 18 0c 10 22 00 01                  movb LEDS,PORTB
2342 20 32                              bra DT_BRILLO
2344                    P4:
2344 18 0b f7 02 58                     movb #$F7,PTP                         ;se habilita display 4
2349 18 0c 10 21 00 01                  movb DISP4,PORTB
234f 20 25                              bra DT_BRILLO
2351                    P3:
2351 18 0b fb 02 58                     movb #$FB,PTP                         ;se habilita display 3
2356 18 0c 10 20 00 01                  movb DISP3,PORTB
235c 20 18                              bra DT_BRILLO
235e                    P2:
235e 18 0b fd 02 58                     movb #$FD,PTP                         ;se habilita display 2
2363 18 0c 10 1f 00 01                  movb DISP2,PORTB
2369 20 0b                              bra DT_BRILLO
236b                    P1:
236b 18 0b fe 02 58                     movb #$FE,PTP                         ;se habilita display 1
2370 18 0c 10 1e 00 01                  movb DISP1,PORTB
2376                    DT_BRILLO:
2376 86 64                              ldaa #100                       ;Modifica el ciclo de trabajo para aumentar o disminuir el brillo
2378 b0 10 0b                           suba BRILLO
237b 7a 10 25                           staa DT
                        
237e b6 10 24                           ldaa CONT_TICKS                 ; si el contador llega a ciclo, termina
2381 b1 10 25                           cmpa DT
2384 26 0a                              bne FIN_OC4
2386 18 0b ff 02 58                     movb #$FF,PTP                         ;deshabilita displays de 7 segmentos
238b 18 0b 02 02 68                     movb #$02,PTJ                         ;deshabilita LEDS
2390                    FIN_OC4:
2390 72 10 24                           inc CONT_TICKS
2393 4c 4e 10                           bset TFLG1,$10                         ;reinicia la bandera de interrupcion
2396 dc 44                              ldd TCNT                         ;Carga el valor actual de TCNT
2398 c3 00 3c                           addd #60                         ;60 por preestaclador 8
239b 5c 58                              std TC4                         ;actualiza el nuevo valor a alcanzar.
239d 0b                                 rti
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina Send_Command: se encarga de enviar al LCD el comando que recibe
                        ;     por el acumulador A.
                        ;     INPUTS: Acumulador A, 260us
                        ;------------------------------------------------------------------------------
239e 36                 Send_Command:   psha                    ;se guarda a en pila
239f 84 f0                              anda #$F0               ;mascara de parte alta
23a1 44                                 lsra                    ;deja limpios los dos bits menos significativos
23a2 44                                 lsra
                        
23a3 5a 32                              staa PORTK              ;guarda a en portk
23a5 4d 32 01                           bclr PORTK,$01          ;modif bits menos significativos
23a8 4c 32 02                           bset PORTK,$02
                        
23ab 18 0c 10 2b 10 29                  movb D260uS,Cont_Delay  ;delay
23b1 16 23 fe                           jsr Delay
                        
23b4 4d 32 02                           bclr PORTK,$02
23b7 32                                 pula                    ;trae a
23b8 84 0f                              anda #$0F               ;mascara parte baja
23ba 48                                 lsla
23bb 48                                 lsla
                        
23bc 5a 32                              staa PORTK
23be 4d 32 01                           bclr PORTK,$01
23c1 4c 32 02                           bset PORTK,$02
                        
23c4 18 0c 10 2b 10 29                  movb D260uS,Cont_Delay  ; delay
23ca 16 23 fe                           jsr Delay
                        
23cd 4d 32 02                           bclr PORTK,$02
23d0 3d                                 rts
                        
                        ;------------------------------------------------------------------------------
23d1                    Send_Data:
23d1 36                                 psha ;el dato se recibe en acumulador A y se protege para poder analizar sus nibbles por separado
23d2 84 f0                              anda #$F0 ;Se deja solo el nibble superior del dato
23d4 44                                 lsra
23d5 44                                 lsra ;se alinea nibble con bus datos en PORTK5-PORTK2.
23d6 5a 32                              staa PORTK ;se carga parte alta del dato en el bus de datos.
23d8 4c 32 03                           bset PORTK,$03 ;Se habilita el envio de dato y comunicacion con la LCD
23db 18 0c 10 2b 10 29                  movb D260us,Cont_Delay ;se inicia el retardo de 260us
23e1 16 23 fe                           jsr Delay
23e4 4d 32 02                           bclr PORTK,$02 ;Se deshabilita comunicacion con la LCD
23e7 32                                 pula ;se recupera el dato original de la pila
23e8 84 0f                              anda #$0F ;Se deja solo el nibble inferior del dato
23ea 48                                 lsla
23eb 48                                 lsla ;se alinea nibble con bus datos en PORTK5-PORTK2.
23ec 5a 32                              staa PORTK ;se carga parte baja del dato en el bus de datos.
23ee 4c 32 03                           bset PORTK,$03 ;Se habilita envio de datos y comunicacion con la LCD
23f1 18 0c 10 2b 10 29                  movb D260us,Cont_Delay ;se inicia el retardo de 260us.
23f7 16 23 fe                           jsr Delay
23fa 4d 32 02                           bclr PORTK,$02 ;Se deshabilita comunicacion con la LCD
23fd 3d                                 rts
                        
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina Delay: se mantiene en un loop cerrado hasta que Cont_Delay sea 0.
                        ;     Cont_Delay es descontado por OC4 a 50 kHz.
                        ;     INPUTS: Cont_Delay
                        ;------------------------------------------------------------------------------
23fe                    Delay:
23fe f7 10 29                           tst Cont_Delay      ;Espera hasta que OC4 disminuya
2401 26 fb                              bne Delay
2403 3d                                 rts
                        
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina BCD_BIN: el arreglo Num_Array corresponde a un numero en BCD donde
                        ;     cada entrada es un digito. Esta subrutina toma este arreglo y calcula en
                        ;     binario el valor numerico del arreglo. El resultado se almacena en ValorVueltas.
                        ;     INPUTS: NUM_ARRAY
                        ;     OUTPUTS:ValorVueltas
                        ;------------------------------------------------------------------------------
2404 ce 10 09           BCD_BIN:        ldx #Num_Array
2407 e6 01                              ldab 1,x           ;revisamos si la unidad es distinta de FF
2409 c1 ff                              cmpb #$FF
240b 27 05                              beq UNIDAD         ;si es FF, el valor no es valido
240d 7b 10 02                           stab ValorVueltas       ;Si no, lo guarda en ValorVueltas
2410 20 07                              bra DECENA         ;lee decenas
                        
2412 18 0c 10 09 10 02  UNIDAD:         movb Num_Array,ValorVueltas
2418 3d                                 rts
                        
2419                    DECENA:
2419 87                                 clra
241a f6 10 09                           ldab Num_Array    ;carga en b
241d cd 00 0a                           ldy #10           ;multiplica decenas por 10
2420 13                                 emul
                        
2421 fb 10 02                           addb ValorVueltas
2424 7b 10 02                           stab ValorVueltas
                        
2427 3d                                 rts
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina BIN_BCD: esta subrutina realiza la conversion de un numero
                        ;     binario entre 0 y 99 (inclusivos) a su representacion en BCD. El numero
                        ;     a convertir se recibe como parametro por el registro A. El resultado en
                        ;     BCD se devuelve por la variable BCD_L, donde el nibble mas significativo son
                        ;     las decenas y el menos significativo las unidades.
                        ;------------------------------------------------------------------------------
2428                    BIN_BCD:
                        
2428 c6 07                              Ldab #7  ; Contador B=15
242a 79 10 1a                           Clr BCD_L
                        
242d                    lazo:
242d 48                                 Lsla
242e 75 10 1a                           Rol BCD_L  ;Lo mismo para la variable BCD_L y BCD_H
2431 36                                 Psha
                        
2432 b6 10 1a                           Ldaa BCD_L ;Cargamos en A el BCD_L
2435 84 0f                              Anda #$0F  ;Tomamos solo en cuenta los 4LSB
2437 81 05                              Cmpa #5   ;Comparamos con 5
2439 25 02                              Blo men031  ;Si es menor, salte a men031
243b 8b 03                              Adda #3  ;En caso de mayor, sume 3
                        
243d                    men031
243d 7a 10 1d                           Staa LOW  ;Guardamos temporalmente el resultado anterior
                        
2440 b6 10 1a                           Ldaa BCD_L
2443 84 f0                              Anda #$F0 ;En A tenemos cargado del bit 4 al 7
2445 81 50                              Cmpa #$50  ;Comparamos con $50
2447 25 02                              Blo men301
2449 8b 30                              Adda #$30   ;Si es mayor, sume 30
                        
244b                    men301
244b bb 10 1d                           Adda LOW   ;Se suman los bits para obtener los 4 LSB de resultado
244e 7a 10 1a                           Staa BCD_L  ;Se guarda el resultado
2451 32                                 Pula
2452 04 31 d8                           Dbne b, lazo
                        
2455 48                                 Lsla
2456 75 10 1a                           Rol BCD_L
                        
2459 3d                                 Rts
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina CONV_BIN_BCD: recibe como parametros de entrada las variables BIN1 y
                        ;     BIN2 y realiza la conversion a BCD de cada una de estas variables. Luego de la conversion, si
                        ;     el numero es menor que 10 significa que el display de 7 segmentos utilizado
                        ;     para las decenas no es necesario que este encendido; en este caso se escribe
                        ;     $B en el nibble mas significativo de BCD1 y BCD2 para indicarlo. Carga $BB
                        ;     en BCD1 o BCD2 dependiendo de si deben estar apagados, mientras que carga
                        ;     $AA si deben tener una raya.
                        ;     INPUTS: BIN1, BIN2
                        ;     OUTPUTS: BCD1, BCD2
                        ;------------------------------------------------------------------------------
245a                    CONV_BIN_BCD:
245a b6 10 16           		Ldaa BIN1
                        
245d 81 bb              		Cmpa #$BB
245f 27 06              		Beq BIN1_BB
                        
2461 81 aa              		Cmpa #$AA
2463 27 09              		Beq BIN1_AA
                        
2465 20 0e              		Bra BIN1_CALC
                        
2467 18 0b bb 10 18     BIN1_BB:	Movb #$BB,BCD1
246c 20 16              		Bra BIN2_CHECK
                        
246e 18 0b aa 10 18     BIN1_AA:	Movb #$AA,BCD1
2473 20 0f              		Bra BIN2_CHECK
                        
                        
2475                    BIN1_CALC:
2475 16 24 28                           Jsr BIN_BCD ;Pasamos BIN1 a BCD
2478 b6 10 1a                           Ldaa BCD_L
247b 81 0a                              Cmpa #10
247d 24 02                              Bhs mayor1
247f 8b b0                              Adda #$B0 ;Si solo tiene un digito, agrega B como "decenas"
                        
2481 7a 10 18           mayor1          Staa BCD1 ;Guardamos el valor en BCD1
                        
                        
2484 b6 10 17           BIN2_CHECK:	Ldaa BIN2
                        
2487 81 bb              		Cmpa #$BB
2489 27 06              		Beq BIN2_BB
                        
248b 81 aa              		Cmpa #$AA
248d 27 09              		Beq BIN2_AA
                        
248f 20 0e              		Bra BIN2_CALC
                        
2491 18 0b bb 10 19     BIN2_BB:	Movb #$BB,BCD2
2496 20 16              		Bra FIN_CONV
                        
2498 18 0b aa 10 19     BIN2_AA:	Movb #$AA,BCD2
249d 20 0f              		Bra FIN_CONV
                        
                        
249f                    BIN2_CALC:
249f 16 24 28                           Jsr BIN_BCD ;Pasamos BIN1 a BCD
24a2 b6 10 1a                           Ldaa BCD_L
24a5 81 0a                              Cmpa #10
24a7 24 02                              Bhs mayor2
24a9 8b b0                              Adda #$B0 ;Si solo tiene un digito, agrega B como "decenas"
                        
24ab 7a 10 19           mayor2          Staa BCD2 ;Guardamos el valor en BCD1
                        
                        
24ae 3d                 FIN_CONV:	Rts
                        
                        ;------------------------------------------------------------------------------
                        ; Subrutina TAREA_TECLADO: En esta subrutina se da la lectura del teclado. Aqui
                        ;     se lee el teclado en el puerto A, se suprimen los rebotes, y se maneja la
                        ;     situacion de tecla retenida.
                        ;     INPUTS: Cont_Reb, Tecla, ARRAY_OK, Tecla_IN
                        ;     OUTPUTS: TCL_LISTA
                        ;------------------------------------------------------------------------------
24af                    TAREA_TECLADO:
24af b6 10 06                           Ldaa Cont_Reb
24b2 81 00                              Cmpa #0
24b4 26 4a                              Bne RETORNAR
24b6 16 25 01                           Jsr MUX_TECLADO
24b9 b6 10 04                           Ldaa Tecla
24bc 81 ff                              Cmpa #$FF
24be 26 0e                              Bne PRESIONADA
24c0 1f 10 00 01 3b                     Brclr Banderas,$01,RETORNAR                 ; Si TCL_LISTA es 0, no hay tecla que registrar por lo que se termina la subrutina
24c5 1d 10 00 03                        Bclr Banderas,#$03                         ; Caso contrario se registra la tecla. Se ponen en 0 TCL_LISTA y TCL_LEIDA para la siguiente tecla
24c9 16 25 37                           Jsr FORMAR_ARRAY
24cc 20 32                                      Bra RETORNAR
                        
24ce                    PRESIONADA:
24ce 1f 10 00 02 0e                     Brclr Banderas,$02,NotProc
24d3 b6 10 05                           Ldaa Tecla_IN
24d6 b1 10 04                           Cmpa Tecla
24d9 26 17                              Bne Delete
24db 1c 10 00 01                        Bset Banderas,$01                         ; La tecla esta lista para registro
24df 20 1f                              bra RETORNAR
                        
                        
                        
24e1                    NotProc:
24e1 18 0c 10 04 10 05                  Movb Tecla, Tecla_IN
24e7 1c 10 00 02                        Bset Banderas, #2
24eb 18 0b 0a 10 06                     Movb #10,Cont_Reb
24f0 20 0e                              Bra RETORNAR
                        
24f2                    DELETE:
24f2 18 0b ff 10 04                     Movb #$FF,Tecla
24f7 18 0b ff 10 05                     Movb #$FF,Tecla_IN
24fc 1d 10 00 03                        Bclr Banderas, #3
                        
2500                    RETORNAR:
2500 3d                                 RTS
                        
                        
                        ;------------------------------------------------------------------------------
2501 18 0b ef 10 08     MUX_TECLADO:    movb #$EF,Patron                ; Patron inicial
2506 cc f0 00                           ldd #$F000                       ; final cuando se desplaza patron
                        
2509 18 0c 10 08 00 00  BUSCAR_COLUMNA: movb Patron,PORTA
250f 4f 00 08 18                        brclr PORTA,$08,columna2            ; Verificamos se la tecla est? en la columna2
2513 4f 00 04 15                        brclr PORTA,$04,columna1
2517 4f 00 02 12                        brclr PORTA,$02,columna0
251b 78 10 08                           lsl Patron                          ; Se desplaza el patron para verificar siguiente fila
251e cb 03                              addb #3                             ; Se suman 3 para aumentar esa cantidad en el array de posibilidades
2520 b1 10 08                           cmpa Patron
2523 26 e4                              bne BUSCAR_COLUMNA
2525 18 0b ff 10 04                     movb #$FF,Tecla
252a 3d                 TERMINAR:       rts
                        
252b 52                 columna2:       incb                                ; Incrementa en 2 si salta ac?
252c 52                 columna1:       incb                                ; Incrementa en 1 si salta ac?
252d ce 10 40           columna0:       ldx #Teclas
2530 18 0d e5 10 04                     movb B,X,Tecla                      ; Se mueve la tecla encontrada
2535 20 f3                              bra TERMINAR
                        
                        ;------------------------------------------------------------------------------
2537 b6 10 05           FORMAR_ARRAY:   ldaa Tecla_IN                   ; valor ingresado
253a f6 10 07                           ldab Cont_TCL                   ; cantidad de numeros
253d ce 10 09                           ldx #Num_Array                   ; Posici?n del array
                        
2540 f1 10 03                           cmpb MAX_TCL                    ; comparamos si ya est? lleno
2543 27 13                              beq ARRAY_LLENO
2545 c1 00                              cmpb #0                         ; vemos si est? vac?o
2547 27 2a                              beq PRIMER_VAL
2549 81 0b                              cmpa #$0B                       ; tecla borrar
254b 27 42                              beq BORRAR
254d 81 0e                              cmpa #$0E                       ; tecla enter
254f 27 34                              beq ENTER
2551 6a e5                              staa b,x                        ; guarda en Num_array + cont_TCL
2553 72 10 07                           inc Cont_TCL
2556 20 3f                              bra end_formar
                        
2558 81 0b              ARRAY_LLENO:    cmpa #$0B
255a 26 0a                              bne ARRAY_LLENO_1
255c 53                                 decb
255d 18 08 e5 ff                        movb #$FF,b,x                    ; Para borrar reemplazamos valor actual con ff
2561 73 10 07                           dec Cont_TCL
2564 20 31                              bra end_formar
                        
2566 81 0e              ARRAY_LLENO_1:  cmpa #$0E                         ; es enter?
2568 26 2d                              bne end_formar
256a 1c 10 00 04                        bset Banderas,$04                ; bandera de array ok
256e 79 10 07                           clr Cont_TCL                     ; vac?a contador tc
2571 20 24                              bra end_formar
                        
2573 81 0b              PRIMER_VAL:     cmpa #$0B
2575 27 20                              beq end_formar                         ; terminar
                        
2577 81 0e              PRIMER_VAL_1:   cmpa #$0E
2579 27 1c                              beq end_formar
257b 18 09 e5 10 05                     movb Tecla_IN,b,x
2580 72 10 07                           inc Cont_TCL
2583 20 12                              bra end_formar
                        
2585 1c 10 00 04        ENTER:          bset Banderas,#$04                    ; bandera de array_ok
2589 1d 10 07 ff                        bclr Cont_TCL,#$FF                    ; pone contador en 0
258d 20 08                              bra end_formar
                        
                        
258f 73 10 07           BORRAR:         dec Cont_TCL
2592 53                                 decb
2593 18 08 e5 ff                        movb #$FF,b,x
                        
                        
2597 18 0b ff 10 05     end_formar:     movb #$FF,Tecla_IN
259c 3d                                 rts
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina MODO_CONFIG: Esta subrutina corresponde a las operaciones necesarias
                        ;     llevar a cabo la configuracion del sistema. Primero pone el valor adecuado
                        ;     de los LEDS para que el usuario pueda saber el modo. Posteriormente, con
                        ;     el uso de TAREA_TECLADO se da la lectura del valor ValorVueltas. Una vez que el
                        ;     usuario presiona ENTER se valida que el valor de ValorVueltas este entre 5 y 25.
                        ;     Si es asi entonces coloca este valor en BIN1 para que pueda ser desplegado
                        ;     en los displays 3 y 4.
                        ;     INPUTS: ValorVueltas
                        ;     OUTPUTS: BIN1, BIN2
                        ;------------------------------------------------------------------------------
259d                    MODO_CONFIG:
259d ce 10 b4                           LDX #CONFIG_MSG1 ;carga el mensaje de configuracion
25a0 cd 10 c5                           LDY #CONFIG_MSG2
25a3 16 27 12                           JSR Cargar_LCD
25a6 18 0b 02 10 22                     MOVB #$02,LEDS ;carga el LED asociado al modo
25ab 18 03 00 00 10 0d                  MOVW #$0000,TICK_EN ;borra TICK_EN y TICK_DIS
25b1 18 03 00 00 10 0f                  MOVW #$0000,TICK_DIS
25b7 18 0c 10 01 10 16                  movb NumVueltas, BIN1                       ;Movemos CatnPQ a bin1
25bd 1e 10 00 04 04                     brset Banderas,$04,DATA_CHECK           ;Revisa bandera arrayok
25c2 16 24 af                           jsr TAREA_TECLADO                       ;Si no arrayok, va a teclado
25c5 3d                                 rts
                        
25c6                    DATA_CHECK:
25c6 16 24 04                           jsr BCD_BIN                              ;pasa de bcd a bin
25c9 86 03                              ldaa #3                                 ;limites
25cb b1 10 02                           cmpa ValorVueltas
25ce 2e 07                              bgt INVALIDO
25d0 86 17                              ldaa #23
25d2 b1 10 02                           cmpa ValorVueltas
25d5 2c 0b                              bge VALIDO
                        
25d7                    INVALIDO:                                                ;caso en que el valor no esta en rango
25d7 1d 10 00 04                        bclr Banderas,$04
25db 79 10 02                           Clr ValorVueltas
25de 79 10 09                           Clr Num_Array
25e1 3d                                 rts
                        
25e2                    VALIDO:
25e2 1d 10 00 04                        bclr Banderas, $04                       ;caso en rango, se guarda
25e6 18 0c 10 02 10 01                  movb ValorVueltas,NumVueltas
25ec 18 0c 10 02 10 16                  movb ValorVueltas,BIN1
25f2 79 10 02                           Clr ValorVueltas
25f5 79 10 09                           Clr Num_Array
25f8 3d                                 rts
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina MODO_RESUM: Esta subrutina corresponde a la operacion del modo resumen.
                        ;      Carga el mensaje resume resumen en la pantalla LCD y los valores de VUELTAS y
                        ;      VELPROM en las pantallas de 7 segmentos.
                        ;      INPUTS: VUELTAS, VELPROM
                        ;      OUTPUTS: BIN1, BIN2
                        ;------------------------------------------------------------------------------
                        
25f9                    MODO_RESUM:
25f9 ce 10 f8                           LDX #RESUM_MSG1 ;carga el mensaje resumen en la pantalla LCD
25fc cd 11 09                           LDY #RESUM_MSG2
25ff 16 27 12                           JSR Cargar_LCD
2602 18 0b 08 10 22                     MOVB #$08,LEDS
2607 18 0c 10 12 10 17                  MOVB VUELTAS,BIN2 ;carga los valores de VUELTAS y VELPROM en 7 segmentos
260d 18 0c 10 13 10 16                  MOVB VELPROM,BIN1
2613 3d                                 RTS
                        ;------------------------------------------------------------------------------
                        ;   Subrutina PANT_CTRL: Esta subrutina se encarga de manipular las pantallas
                        ;      en el modo competencia. Cuando se detecta el sensor S1 se pone el mensaje
                        ;      calculando. Cuando se activa S2, si la velocidad no esta en el rango valido,
                        ;      pone el mensaje de alerta en la pantalla LCD y pone rayas en la pantalla de 7 segmentos,
                        ;      caso contrario se comporta de acuerdo a las especificaciones definidas en el enunciado.
                        ;      INPUTS: VELOC, VUELTAS, PANT_FLG, CANT_VUELTAS_MAXIMA, VELOCIDAD_VAL, DISPLAY_CALC
                        ;      OUTPUTS: BIN1, BIN2
                        ;------------------------------------------------------------------------------
2614                    PANT_CTRL:
2614 1d 02 66 09                        BCLR PIEH,$09 ;deshabilita las interrupciones del puerto H
2618 1e 10 30 01 31                     BRSET BanderasEx $01 VEL_VAL_PANT ;Se revisa si la velocidad es valida
261d b6 10 16                           LDAA BIN1 ;la velocidad es invalida, se revisa si BIN1 es $AA
2620 81 aa                              CMPA #$AA
2622 27 24                              BEQ FIRST_CHECK_PANT ;si no es $AA, se debe cargar $AA para poner rayas en la pantalla
2624 18 03 00 00 10 0d                  MOVW #$0000,TICK_EN ;no es $AA, se borra TICK_EN
262a 18 03 00 89 10 0f                  MOVW #137,TICK_DIS ;137*21.8ms = 3 s
2630 18 0b aa 10 16                     MOVB #$AA,BIN1 ;se ponen rayas en la pantalla de 7 segmentos
2635 18 0b aa 10 17                     MOVB #$AA,BIN2
263a 1c 10 00 08                        BSET Banderas %00001000 ;se levanta PANT_FLG
263e ce 11 1a                           LDX #ALERT_MSG1 ;se carga el mensaje de alerta
2641 cd 11 2b                           LDY #ALERT_MSG2
2644 16 27 12                           JSR Cargar_LCD
2647 3d                                 RTS
                        
2648                    FIRST_CHECK_PANT:
2648 1f 10 00 08 3b                     BRCLR Banderas %00001000 BIN1_BB_INITIAL_MSG ;BIN1 es $AA, se revisa PANT_FLG
264d 3d                                 RTS
                        
264e                    VEL_VAL_PANT:
264e 1e 10 00 20 28                     BRSET Banderas %00100000 SECOND_CHECK_PANT ;La velocidad es valida, se revisa CALC_TICKS
2653 1c 10 00 20                        BSET Banderas %00100000 ;si CALC_TICKS es 0, se realizan los calculos asociados y se pone en 1
2657 fd 10 31                           LDY TICKS_TIME ;Y tiene la cantidad de ticks que pasan en 55 m
265a cc 00 64                           LDD #100
265d 13                                 EMUL ;D tiene la cantidad de ticks que pasan en 5500 m
265e ce 00 37                           LDX #55
2661 18 10                              IDIV ;X tiene la cantidad de ticks que pasan en 100 m
2663 7e 10 31                           STX TICKS_TIME ;TICKS_TIME es la cantidad de ticks que pasan en 100 m
2666 b7 54                              TFR X,D
2668 f3 10 31                           ADDD TICKS_TIME
266b 7c 10 0d                           STD TICK_EN ;TICK_EN es el tiempo para recorrer 200 m, ya que la pantalla se halla a 300 m de S2
266e f3 10 31                           ADDD TICKS_TIME
2671 7c 10 0f                           STD TICK_DIS ;TICK_DIS es el tiempo para recorrer 300 m, pasando la pantalla
2674 18 03 00 00 10 31                  MOVW #$0000,TICKS_TIME ;TICKS_TIME se limpia
267a 3d                                 RTS
                        
267b                    SECOND_CHECK_PANT:
267b 1e 10 00 08 2c                     BRSET Banderas %00001000 CHECK_BIN1_BB_COMP ;CALC_TICKS era 1, se hacen las revisiones de $BB segun PANT_FLG
2680 b6 10 16                           LDAA BIN1 ;PANT_FLG es 0
2683 81 bb                              CMPA #$BB
2685 26 01                              BNE BIN1_BB_INITIAL_MSG ;si A es $BB, se retorna
2687 3d                                 RTS
                        
2688                    BIN1_BB_INITIAL_MSG:
2688 ce 10 70                           LDX #RunMeter ;carga del mensaje inicial
268b cd 10 81                           LDY #Esperando
268e 16 27 12                           JSR Cargar_LCD
2691 18 0b bb 10 16                     MOVB #$BB,BIN1 ;se apagan las pantallas de 7 segmentos
2696 18 0b bb 10 17                     MOVB #$BB,BIN2
269b 1e 10 30 02 04                     BRSET BanderasEx $02 CLEAR_PANT_VARS ;se verifica si se llego a la ultima vuelta
26a0 1c 02 66 09                        BSET PIEH,$09
                        
26a4                    CLEAR_PANT_VARS:
26a4 1d 10 00 20                        BCLR Banderas %00100000 ;se limpian las variables de la pantalla
26a8 79 10 11                           CLR VELOC
26ab 3d                                 RTS
                        
26ac                    CHECK_BIN1_BB_COMP:
26ac b6 10 16                           LDAA BIN1
26af 81 bb                              CMPA #$BB
26b1 27 01                              BEQ BIN1_BB_COMP_MSG
26b3 3d                                 RTS
                        
26b4                    BIN1_BB_COMP_MSG:
26b4 ce 10 d6                           LDX #COMP_MSG1
26b7 cd 10 e7                           LDY #COMP_MSG2
26ba 16 27 12                           JSR Cargar_LCD
26bd 18 0c 10 12 10 17                  MOVB VUELTAS,BIN2
26c3 18 0c 10 11 10 16                  MOVB VELOC,BIN1
26c9 3d                                 RTS
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina MODO_COMP: Esta subrutina corresponde a la operacion del modo competencia.
                        ;      Pasa revisando el valor de VELOC para acceder a PANT_CTRL
                        ;------------------------------------------------------------------------------
26ca                    MODO_COMP:
26ca 18 0b 04 10 22                     MOVB #$04,LEDS
26cf 1f 10 30 04 0d                     BRCLR BanderasEx $04 CHECK_VEL_COMP ;se revisa si se debe imprimir el mensaje calculando
26d4 1d 10 30 04                        BCLR BanderasEx,$04
26d8 ce 10 70                           LDX #RunMeter ;se imprime el mensaje calculando
26db cd 10 92                           LDY #Calculando
26de 16 27 12                           JSR Cargar_LCD
26e1                    CHECK_VEL_COMP:
26e1 f7 10 11                           TST VELOC
26e4 27 03                              BEQ FIN_COMP
26e6 16 26 14                           JSR PANT_CTRL
                        
26e9                    FIN_COMP:
26e9 3d                                 RTS
                        
                        
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina MODO_LIBRE: Esta subrutina corresponde a la operacion del modo libre.
                        ;      Se imprime en pantalla el mensaje del modo libre, se apaga la pantalla de 7
                        ;      segmentos y se deshabilitan las interrupciones OC4 y RTI. Al deshabilitar la RTI
                        ;      no se realizan nuevos ciclos de conversion del ATD por lo que virtualmente esta
                        ;      deshabilitado.
                        ;------------------------------------------------------------------------------
26ea                    MODO_LIBRE:
26ea 1e 10 00 10 22                     BRSET Banderas $10 NOT_FIRST_LIBRE
26ef 1c 10 00 10                        BSET Banderas,$10
26f3 ce 10 70                           LDX #RunMeter
26f6 cd 10 a3                           LDY #LIBRE_MSG
26f9 16 27 12                           JSR Cargar_LCD
26fc 4d 38 80                           BCLR CRGINT,$80
26ff 4d 4c 10                           BCLR TIE,$10
2702 18 0b ff 02 58                     MOVB #$FF,PTP
2707 18 0b 00 02 68                     MOVB #$00,PTJ ;se habilitan los LEDS
270c 18 0b 01 00 01                     MOVB #$01,PORTB ;se coloca en puerto B el estado de los LEDS.
2711                    NOT_FIRST_LIBRE:
2711 3d                                 RTS
                        
                        
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina Cargar_LCD: esta subrutina se encarga de enviar a la pantalla LCD
                        ;     cada caracter, uno por uno, de ambas lineas del LCD. Recibe los parametros
                        ;     en los registros indice X y Y, que contienen las direcciones de inicio a
                        ;     los mensajes de las lineas 1 y 2 respectivamente.
                        ;------------------------------------------------------------------------------
2712 b6 10 2e           Cargar_LCD:     ldaa ADD_L1                           ;inicio de linea
2715 16 23 9e                           jsr Send_Command                ;envía comando
2718 18 0c 10 2c 10 29                  movb D40uS,Cont_Delay           ;delay
271e 16 23 fe                           jsr Delay
                        
2721 a6 30              LINEA1:         ldaa 1,x+                         ;Se va cargando mensaje
2723 81 00                              cmpa #$00
2725 27 0e                              beq CARGAR_LINEA2               ;Se pasa a cargar linea 2
                        
2727 16 23 d1                           jsr Send_Data
                        
272a 18 0c 10 2c 10 29                  movb D40uS,Cont_Delay
2730 16 23 fe                           jsr Delay
2733 20 ec                              bra LINEA1
                        
                        
2735 b6 10 2f           CARGAR_LINEA2:  ldaa ADD_L2                     ;inicio linea 2
2738 16 23 9e                           jsr Send_Command
273b 18 0c 10 2c 10 29                  movb D40uS,Cont_Delay
2741 16 23 fe                           jsr Delay
                        
                        
2744 a6 70              LINEA2:         ldaa 1,y+                       ; Se va cargando mensaje
2746 81 00                              cmpa #$00
2748 27 0e                              beq TERMINA_LCD
274a 16 23 d1                           jsr Send_Data
274d 18 0c 10 2c 10 29                  movb D40uS,Cont_Delay           ; delay
2753 16 23 fe                           jsr Delay
2756 20 ec                              bra LINEA2
                        
2758 3d                 TERMINA_LCD:    rts
                        
                        ;------------------------------------------------------------------------------
                        ;   Subrutina BCD_7SEG: esta subrutina se encarga de tomar los valores en BCD1
                        ;     y BCD2 y determinar el valor de DISP1, DISP2, DISP3, DISP4. Estas ultimas
                        ;     cuatro variables son las que indican cuales segmentos de los displays se
                        ;     deben encender para que se muestre el numero deseado. Sencillamente se
                        ;     se analiza cada nibble de BCD1 y BCD2, y se toman decisiones a partir de
                        ;     sus valores.
                        
                        
                        ;------------------------------------------------------------------------------
2759                    BCD_7SEG:
2759 ce 10 50                           Ldx #SEGMENT
275c cd 10 21                           Ldy #DISP4 ;Recorremos displays de derecha a izquierda
275f 86 00                              Ldaa #0
                                        ;Carga de BCD1
2761 b6 10 18                           Ldaa BCD1
2764 f6 10 18                           Ldab BCD1
2767 84 0f                              Anda #$0F
2769 18 0a e4 7f                        Movb A,X,1,Y- ;se guarda en display4
276d 54                                 Lsrb
276e 54                                 Lsrb
276f 54                                 Lsrb
2770 54                                 Lsrb
2771 18 0a e5 7f                        Movb B,X,1,Y-  ;se guarda en display3
                        
                        
2775 ce 10 50                           Ldx #SEGMENT
2778 cd 10 1f                           Ldy #DISP2 ;Recorremos displays de derecha a izquierda
277b 86 00                              Ldaa #0
                                        ;Carga de BCD1
277d b6 10 19                           Ldaa BCD2
2780 f6 10 19                           Ldab BCD2
2783 84 0f                              Anda #$0F
2785 18 0a e4 7f                        Movb A,X,1,Y- ;se guarda en display2
2789 54                                 Lsrb
278a 54                                 Lsrb
278b 54                                 Lsrb
278c 54                                 Lsrb
278d 18 0a e5 7f                        Movb B,X,1,Y-  ;se guarda en display1
                        
2791 3d                 returnBCD_7SEG: Rts
                        
                        

Executed: Thu Feb 25 01:05:07 2021
Total cycles: 2240, Total bytes: 2188
Total errors: 0, Total warnings: 0
